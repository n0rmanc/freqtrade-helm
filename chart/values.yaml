# Default values for freqtrade-helm.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
    repository: freqtradeorg/freqtrade
    # This sets the pull policy for images.
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: 'stable'

# This is for the secretes for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ''
fullnameOverride: ''

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Automatically mount a ServiceAccount's API credentials?
    automount: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ''

# This is for setting Kubernetes Annotations to a Deployment.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
deploymentAnnotations: {}
# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext:
    {}
    # fsGroup: 2000

securityContext:
    {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
    # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
    type: ClusterIP
    # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
    port: 8080

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
    enabled: false
    className: ''
    annotations:
        {}
        # kubernetes.io/ingress.class: nginx
        # kubernetes.io/tls-acme: "true"
    hosts:
        - host: chart-example.local
          paths:
              - path: /
                pathType: ImplementationSpecific
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

resources:
    {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
    httpGet:
        path: /
        port: http
    initialDelaySeconds: 30
readinessProbe:
    httpGet:
        path: /
        port: http

# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []

nodeSelector: {}

tolerations: []

affinity: {}

freqtrade:
    dbUrl: sqlite:////freqtrade/user_data/db/tradesv3.sqlite
    strategyName: SampleStrategy
    config: |
        {
            "$schema": "https://schema.freqtrade.io/schema.json",
            "max_open_trades": 3,
            "stake_currency": "USDT",
            "stake_amount": "unlimited",
            "tradable_balance_ratio": 0.99,
            "fiat_display_currency": "USD",
            "dry_run": true,
            "dry_run_wallet": 1000,
            "cancel_open_orders_on_exit": false,
            "trading_mode": "spot",
            "margin_mode": "",
            "unfilledtimeout": {
                "entry": 10,
                "exit": 10,
                "exit_timeout_count": 0,
                "unit": "minutes"
            },
            "entry_pricing": {
                "price_side": "same",
                "use_order_book": true,
                "order_book_top": 1,
                "price_last_balance": 0.0,
                "check_depth_of_market": {
                    "enabled": false,
                    "bids_to_ask_delta": 1
                }
            },
            "exit_pricing":{
                "price_side": "same",
                "use_order_book": true,
                "order_book_top": 1
            },
            "exchange": {
                "name": "binance",
                "key": "",
                "secret": "",
                "ccxt_config": {},
                "ccxt_async_config": {},
                "pair_whitelist": [
                ],
                "pair_blacklist": [
                    "BNB/.*"
                ]
            },
            "pairlists": [
                {
                    "method": "VolumePairList",
                    "number_assets": 20,
                    "sort_key": "quoteVolume",
                    "min_value": 0,
                    "refresh_period": 1800
                }
            ],
            "telegram": {
                "enabled": false,
                "token": "",
                "chat_id": ""
            },
            "api_server": {
                "enabled": false,
                "listen_ip_address": "127.0.0.1",
                "listen_port": 8080,
                "verbosity": "error",
                "enable_openapi": false,
                "jwt_secret_key": "092f301eeb93ace811376e019eebbf582cc513f15c8ed37227cd4f1866d8e244",
                "ws_token": "WJQic52kONgJXKnyIPAwsaMcmjJAJ23MpA",
                "CORS_origins": [],
                "username": "",
                "password": ""
            },
            "bot_name": "freqtrade",
            "initial_state": "running",
            "force_entry_enable": false,
            "internals": {
                "process_throttle_secs": 5
            }
        }

    strategy: |
        # pragma pylint: disable=missing-docstring, invalid-name, pointless-string-statement
        # flake8: noqa: F401
        # isort: skip_file
        # --- Do not remove these imports ---
        import numpy as np
        import pandas as pd
        from datetime import datetime, timedelta, timezone
        from pandas import DataFrame
        from typing import Optional, Union

        from freqtrade.strategy import (
            IStrategy,
            Trade,
            Order,
            PairLocks,
            informative,  # @informative decorator
            # Hyperopt Parameters
            BooleanParameter,
            CategoricalParameter,
            DecimalParameter,
            IntParameter,
            RealParameter,
            # timeframe helpers
            timeframe_to_minutes,
            timeframe_to_next_date,
            timeframe_to_prev_date,
            # Strategy helper functions
            merge_informative_pair,
            stoploss_from_absolute,
            stoploss_from_open,
        )

        # --------------------------------
        # Add your lib to import here
        import talib.abstract as ta
        from technical import qtpylib


        # This class is a sample. Feel free to customize it.
        class SampleStrategy(IStrategy):
            """
            This is a sample strategy to inspire you.
            More information in https://www.freqtrade.io/en/latest/strategy-customization/

            You can:
                :return: a Dataframe with all mandatory indicators for the strategies
            - Rename the class name (Do not forget to update class_name)
            - Add any methods you want to build your strategy
            - Add any lib you need to build your strategy

            You must keep:
            - the lib in the section "Do not remove these libs"
            - the methods: populate_indicators, populate_entry_trend, populate_exit_trend
            You should keep:
            - timeframe, minimal_roi, stoploss, trailing_*
            """

            # Strategy interface version - allow new iterations of the strategy interface.
            # Check the documentation or the Sample strategy to get the latest version.
            INTERFACE_VERSION = 3

            # Can this strategy go short?
            can_short: bool = False

            # Minimal ROI designed for the strategy.
            # This attribute will be overridden if the config file contains "minimal_roi".
            minimal_roi = {
                # "120": 0.0,  # exit after 120 minutes at break even
                "60": 0.01,
                "30": 0.02,
                "0": 0.04,
            }

            # Optimal stoploss designed for the strategy.
            # This attribute will be overridden if the config file contains "stoploss".
            stoploss = -0.10

            # Trailing stoploss
            trailing_stop = False
            # trailing_only_offset_is_reached = False
            # trailing_stop_positive = 0.01
            # trailing_stop_positive_offset = 0.0  # Disabled / not configured

            # Optimal timeframe for the strategy.
            timeframe = "5m"

            # Run "populate_indicators()" only for new candle.
            process_only_new_candles = True

            # These values can be overridden in the config.
            use_exit_signal = True
            exit_profit_only = False
            ignore_roi_if_entry_signal = False

            # Hyperoptable parameters
            buy_rsi = IntParameter(low=1, high=50, default=30, space="buy", optimize=True, load=True)
            sell_rsi = IntParameter(low=50, high=100, default=70, space="sell", optimize=True, load=True)
            short_rsi = IntParameter(low=51, high=100, default=70, space="sell", optimize=True, load=True)
            exit_short_rsi = IntParameter(low=1, high=50, default=30, space="buy", optimize=True, load=True)

            # Number of candles the strategy requires before producing valid signals
            startup_candle_count: int = 200

            # Optional order type mapping.
            order_types = {
                "entry": "limit",
                "exit": "limit",
                "stoploss": "market",
                "stoploss_on_exchange": False,
            }

            # Optional order time in force.
            order_time_in_force = {"entry": "GTC", "exit": "GTC"}

            plot_config = {
                "main_plot": {
                    "tema": {},
                    "sar": {"color": "white"},
                },
                "subplots": {
                    "MACD": {
                        "macd": {"color": "blue"},
                        "macdsignal": {"color": "orange"},
                    },
                    "RSI": {
                        "rsi": {"color": "red"},
                    },
                },
            }

            def informative_pairs(self):
                """
                Define additional, informative pair/interval combinations to be cached from the exchange.
                These pair/interval combinations are non-tradeable, unless they are part
                of the whitelist as well.
                For more information, please consult the documentation
                :return: List of tuples in the format (pair, interval)
                    Sample: return [("ETH/USDT", "5m"),
                                    ("BTC/USDT", "15m"),
                                    ]
                """
                return []

            def populate_indicators(self, dataframe: DataFrame, metadata: dict) -> DataFrame:
                """
                Adds several different TA indicators to the given DataFrame

                Performance Note: For the best performance be frugal on the number of indicators
                you are using. Let uncomment only the indicator you are using in your strategies
                or your hyperopt configuration, otherwise you will waste your memory and CPU usage.
                :param dataframe: Dataframe with data from the exchange
                :param metadata: Additional information, like the currently traded pair
                :return: a Dataframe with all mandatory indicators for the strategies
                """

                # Momentum Indicators
                # ------------------------------------

                # ADX
                dataframe["adx"] = ta.ADX(dataframe)

                # # Plus Directional Indicator / Movement
                # dataframe['plus_dm'] = ta.PLUS_DM(dataframe)
                # dataframe['plus_di'] = ta.PLUS_DI(dataframe)

                # # Minus Directional Indicator / Movement
                # dataframe['minus_dm'] = ta.MINUS_DM(dataframe)
                # dataframe['minus_di'] = ta.MINUS_DI(dataframe)

                # # Aroon, Aroon Oscillator
                # aroon = ta.AROON(dataframe)
                # dataframe['aroonup'] = aroon['aroonup']
                # dataframe['aroondown'] = aroon['aroondown']
                # dataframe['aroonosc'] = ta.AROONOSC(dataframe)

                # # Awesome Oscillator
                # dataframe['ao'] = qtpylib.awesome_oscillator(dataframe)

                # # Keltner Channel
                # keltner = qtpylib.keltner_channel(dataframe)
                # dataframe["kc_upperband"] = keltner["upper"]
                # dataframe["kc_lowerband"] = keltner["lower"]
                # dataframe["kc_middleband"] = keltner["mid"]
                # dataframe["kc_percent"] = (
                #     (dataframe["close"] - dataframe["kc_lowerband"]) /
                #     (dataframe["kc_upperband"] - dataframe["kc_lowerband"])
                # )
                # dataframe["kc_width"] = (
                #     (dataframe["kc_upperband"] - dataframe["kc_lowerband"]) / dataframe["kc_middleband"]
                # )

                # # Ultimate Oscillator
                # dataframe['uo'] = ta.ULTOSC(dataframe)

                # # Commodity Channel Index: values [Oversold:-100, Overbought:100]
                # dataframe['cci'] = ta.CCI(dataframe)

                # RSI
                dataframe["rsi"] = ta.RSI(dataframe)

                # # Inverse Fisher transform on RSI: values [-1.0, 1.0] (https://goo.gl/2JGGoy)
                # rsi = 0.1 * (dataframe['rsi'] - 50)
                # dataframe['fisher_rsi'] = (np.exp(2 * rsi) - 1) / (np.exp(2 * rsi) + 1)

                # # Inverse Fisher transform on RSI normalized: values [0.0, 100.0] (https://goo.gl/2JGGoy)
                # dataframe['fisher_rsi_norma'] = 50 * (dataframe['fisher_rsi'] + 1)

                # # Stochastic Slow
                # stoch = ta.STOCH(dataframe)
                # dataframe['slowd'] = stoch['slowd']
                # dataframe['slowk'] = stoch['slowk']

                # Stochastic Fast
                stoch_fast = ta.STOCHF(dataframe)
                dataframe["fastd"] = stoch_fast["fastd"]
                dataframe["fastk"] = stoch_fast["fastk"]

                # # Stochastic RSI
                # Please read https://github.com/freqtrade/freqtrade/issues/2961 before using this.
                # STOCHRSI is NOT aligned with tradingview, which may result in non-expected results.
                # stoch_rsi = ta.STOCHRSI(dataframe)
                # dataframe['fastd_rsi'] = stoch_rsi['fastd']
                # dataframe['fastk_rsi'] = stoch_rsi['fastk']

                # MACD
                macd = ta.MACD(dataframe)
                dataframe["macd"] = macd["macd"]
                dataframe["macdsignal"] = macd["macdsignal"]
                dataframe["macdhist"] = macd["macdhist"]

                # MFI
                dataframe["mfi"] = ta.MFI(dataframe)

                # # ROC
                # dataframe['roc'] = ta.ROC(dataframe)

                # Overlap Studies
                # ------------------------------------

                # Bollinger Bands
                bollinger = qtpylib.bollinger_bands(qtpylib.typical_price(dataframe), window=20, stds=2)
                dataframe["bb_lowerband"] = bollinger["lower"]
                dataframe["bb_middleband"] = bollinger["mid"]
                dataframe["bb_upperband"] = bollinger["upper"]
                dataframe["bb_percent"] = (dataframe["close"] - dataframe["bb_lowerband"]) / (
                    dataframe["bb_upperband"] - dataframe["bb_lowerband"]
                )
                dataframe["bb_width"] = (dataframe["bb_upperband"] - dataframe["bb_lowerband"]) / dataframe[
                    "bb_middleband"
                ]

                # Bollinger Bands - Weighted (EMA based instead of SMA)
                # weighted_bollinger = qtpylib.weighted_bollinger_bands(
                #     qtpylib.typical_price(dataframe), window=20, stds=2
                # )
                # dataframe["wbb_upperband"] = weighted_bollinger["upper"]
                # dataframe["wbb_lowerband"] = weighted_bollinger["lower"]
                # dataframe["wbb_middleband"] = weighted_bollinger["mid"]
                # dataframe["wbb_percent"] = (
                #     (dataframe["close"] - dataframe["wbb_lowerband"]) /
                #     (dataframe["wbb_upperband"] - dataframe["wbb_lowerband"])
                # )
                # dataframe["wbb_width"] = (
                #     (dataframe["wbb_upperband"] - dataframe["wbb_lowerband"]) /
                #     dataframe["wbb_middleband"]
                # )

                # # EMA - Exponential Moving Average
                # dataframe['ema3'] = ta.EMA(dataframe, timeperiod=3)
                # dataframe['ema5'] = ta.EMA(dataframe, timeperiod=5)
                # dataframe['ema10'] = ta.EMA(dataframe, timeperiod=10)
                # dataframe['ema21'] = ta.EMA(dataframe, timeperiod=21)
                # dataframe['ema50'] = ta.EMA(dataframe, timeperiod=50)
                # dataframe['ema100'] = ta.EMA(dataframe, timeperiod=100)

                # # SMA - Simple Moving Average
                # dataframe['sma3'] = ta.SMA(dataframe, timeperiod=3)
                # dataframe['sma5'] = ta.SMA(dataframe, timeperiod=5)
                # dataframe['sma10'] = ta.SMA(dataframe, timeperiod=10)
                # dataframe['sma21'] = ta.SMA(dataframe, timeperiod=21)
                # dataframe['sma50'] = ta.SMA(dataframe, timeperiod=50)
                # dataframe['sma100'] = ta.SMA(dataframe, timeperiod=100)

                # Parabolic SAR
                dataframe["sar"] = ta.SAR(dataframe)

                # TEMA - Triple Exponential Moving Average
                dataframe["tema"] = ta.TEMA(dataframe, timeperiod=9)

                # Cycle Indicator
                # ------------------------------------
                # Hilbert Transform Indicator - SineWave
                hilbert = ta.HT_SINE(dataframe)
                dataframe["htsine"] = hilbert["sine"]
                dataframe["htleadsine"] = hilbert["leadsine"]

                # Pattern Recognition - Bullish candlestick patterns
                # ------------------------------------
                # # Hammer: values [0, 100]
                # dataframe['CDLHAMMER'] = ta.CDLHAMMER(dataframe)
                # # Inverted Hammer: values [0, 100]
                # dataframe['CDLINVERTEDHAMMER'] = ta.CDLINVERTEDHAMMER(dataframe)
                # # Dragonfly Doji: values [0, 100]
                # dataframe['CDLDRAGONFLYDOJI'] = ta.CDLDRAGONFLYDOJI(dataframe)
                # # Piercing Line: values [0, 100]
                # dataframe['CDLPIERCING'] = ta.CDLPIERCING(dataframe) # values [0, 100]
                # # Morningstar: values [0, 100]
                # dataframe['CDLMORNINGSTAR'] = ta.CDLMORNINGSTAR(dataframe) # values [0, 100]
                # # Three White Soldiers: values [0, 100]
                # dataframe['CDL3WHITESOLDIERS'] = ta.CDL3WHITESOLDIERS(dataframe) # values [0, 100]

                # Pattern Recognition - Bearish candlestick patterns
                # ------------------------------------
                # # Hanging Man: values [0, 100]
                # dataframe['CDLHANGINGMAN'] = ta.CDLHANGINGMAN(dataframe)
                # # Shooting Star: values [0, 100]
                # dataframe['CDLSHOOTINGSTAR'] = ta.CDLSHOOTINGSTAR(dataframe)
                # # Gravestone Doji: values [0, 100]
                # dataframe['CDLGRAVESTONEDOJI'] = ta.CDLGRAVESTONEDOJI(dataframe)
                # # Dark Cloud Cover: values [0, 100]
                # dataframe['CDLDARKCLOUDCOVER'] = ta.CDLDARKCLOUDCOVER(dataframe)
                # # Evening Doji Star: values [0, 100]
                # dataframe['CDLEVENINGDOJISTAR'] = ta.CDLEVENINGDOJISTAR(dataframe)
                # # Evening Star: values [0, 100]
                # dataframe['CDLEVENINGSTAR'] = ta.CDLEVENINGSTAR(dataframe)

                # Pattern Recognition - Bullish/Bearish candlestick patterns
                # ------------------------------------
                # # Three Line Strike: values [0, -100, 100]
                # dataframe['CDL3LINESTRIKE'] = ta.CDL3LINESTRIKE(dataframe)
                # # Spinning Top: values [0, -100, 100]
                # dataframe['CDLSPINNINGTOP'] = ta.CDLSPINNINGTOP(dataframe) # values [0, -100, 100]
                # # Engulfing: values [0, -100, 100]
                # dataframe['CDLENGULFING'] = ta.CDLENGULFING(dataframe) # values [0, -100, 100]
                # # Harami: values [0, -100, 100]
                # dataframe['CDLHARAMI'] = ta.CDLHARAMI(dataframe) # values [0, -100, 100]
                # # Three Outside Up/Down: values [0, -100, 100]
                # dataframe['CDL3OUTSIDE'] = ta.CDL3OUTSIDE(dataframe) # values [0, -100, 100]
                # # Three Inside Up/Down: values [0, -100, 100]
                # dataframe['CDL3INSIDE'] = ta.CDL3INSIDE(dataframe) # values [0, -100, 100]

                # # Chart type
                # # ------------------------------------
                # # Heikin Ashi Strategy
                # heikinashi = qtpylib.heikinashi(dataframe)
                # dataframe['ha_open'] = heikinashi['open']
                # dataframe['ha_close'] = heikinashi['close']
                # dataframe['ha_high'] = heikinashi['high']
                # dataframe['ha_low'] = heikinashi['low']

                # Retrieve best bid and best ask from the orderbook
                # ------------------------------------
                """
                # first check if dataprovider is available
                if self.dp:
                    if self.dp.runmode.value in ('live', 'dry_run'):
                        ob = self.dp.orderbook(metadata['pair'], 1)
                        dataframe['best_bid'] = ob['bids'][0][0]
                        dataframe['best_ask'] = ob['asks'][0][0]
                """

                return dataframe

            def populate_entry_trend(self, dataframe: DataFrame, metadata: dict) -> DataFrame:
                """
                Based on TA indicators, populates the entry signal for the given dataframe
                :param dataframe: DataFrame
                :param metadata: Additional information, like the currently traded pair
                :return: DataFrame with entry columns populated
                """
                dataframe.loc[
                    (
                        # Signal: RSI crosses above 30
                        (qtpylib.crossed_above(dataframe["rsi"], self.buy_rsi.value))
                        & (dataframe["tema"] <= dataframe["bb_middleband"])  # Guard: tema below BB middle
                        & (dataframe["tema"] > dataframe["tema"].shift(1))  # Guard: tema is raising
                        & (dataframe["volume"] > 0)  # Make sure Volume is not 0
                    ),
                    "enter_long",
                ] = 1

                dataframe.loc[
                    (
                        # Signal: RSI crosses above 70
                        (qtpylib.crossed_above(dataframe["rsi"], self.short_rsi.value))
                        & (dataframe["tema"] > dataframe["bb_middleband"])  # Guard: tema above BB middle
                        & (dataframe["tema"] < dataframe["tema"].shift(1))  # Guard: tema is falling
                        & (dataframe["volume"] > 0)  # Make sure Volume is not 0
                    ),
                    "enter_short",
                ] = 1

                return dataframe

            def populate_exit_trend(self, dataframe: DataFrame, metadata: dict) -> DataFrame:
                """
                Based on TA indicators, populates the exit signal for the given dataframe
                :param dataframe: DataFrame
                :param metadata: Additional information, like the currently traded pair
                :return: DataFrame with exit columns populated
                """
                dataframe.loc[
                    (
                        # Signal: RSI crosses above 70
                        (qtpylib.crossed_above(dataframe["rsi"], self.sell_rsi.value))
                        & (dataframe["tema"] > dataframe["bb_middleband"])  # Guard: tema above BB middle
                        & (dataframe["tema"] < dataframe["tema"].shift(1))  # Guard: tema is falling
                        & (dataframe["volume"] > 0)  # Make sure Volume is not 0
                    ),
                    "exit_long",
                ] = 1

                dataframe.loc[
                    (
                        # Signal: RSI crosses above 30
                        (qtpylib.crossed_above(dataframe["rsi"], self.exit_short_rsi.value))
                        &
                        # Guard: tema below BB middle
                        (dataframe["tema"] <= dataframe["bb_middleband"])
                        & (dataframe["tema"] > dataframe["tema"].shift(1))  # Guard: tema is raising
                        & (dataframe["volume"] > 0)  # Make sure Volume is not 0
                    ),
                    "exit_short",
                ] = 1

                return dataframe
    strategy_params: ''
